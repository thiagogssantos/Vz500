[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    {% set BED_TOPMN = params.BED_TEMP|default(56)|int * 0.90 %}
    {% set BED_TOPMX = params.BED_TEMP|default(56)|int * 0.95 %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(40)|int %}
    {% set BED_TEMPFST = 80|int %}
    {% set BED_SNSTP = printer["temperature_sensor Bed_2"].temperature|float %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default(PLA) %}
    
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber TARGET={CHAMBER_TEMP}
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Octopus TARGET=35
    
    # Start bed heating
    G90

    M140 S{BED_TEMP}
         
    {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
    {% endif %}

    #G1 X410 Y523 F6000
    #M109 S{EXTRUDER_TEMP}
 
    M117 Wait Bed Target {BED_TOPMN}
    M190 S{BED_TEMP}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Bed_2" MINIMUM={BED_TOPMN} MAXIMUM={BED_TOPMX}
    #M117 Clean Nozzle
    #NOZZLE_CLEAN

    Attach_Probe_Lock
    G28 Z
    
      {% if printer.quad_gantry_level.applied|lower == 'false' %}
        {% if V %}
            RESPOND MSG="QGL..."
        {% endif %}
         M117 Quad Bed Level
         QUAD_GANTRY_LEVEL    
         G28 Z
      {% endif %}
    
    #M117 Clean Nozzle
    #NOZZLE_CLEAN

    #{% if FILAMENT_TYPE == PLA %}
        
    #{% elif FILAMENT_TYPE == TPU %}
    #    SET_GCODE_OFFSET Z=0.0 MOVE=1
    #    SET_GCODE_OFFSET Z_ADJUST=+0.06 MOVE=1
    #{% else %}
    #  Attach_Probe_Lock
    #  M117 Calibrate Z 
    #  CALIBRATE_Z
    #{% endif %}

    #{% if BED_TEMP == 65 %}
     #     BED_MESH_PROFILE LOAD=default{BED_TEMP}
     # {% else %}
     #     M117 Adaptive Mesh
     #     BED_MESH_CALIBRATE ADAPTIVE=1
    #{% endif %}
    #M117 Adaptive Mesh
    #BED_MESH_CALIBRATE ADAPTIVE=1
    
    M117 Adaptive Mesh
    BED_MESH_CALIBRATE ADAPTIVE=1
    
    Dock_Probe_Unlock
       
    G1 X10 Y10 Z30 F12000
    
    M117 Wait Chamb Target {CHAMBER_TEMP - 5}
    {% if not CHAMBER_TEMP < 40 %}
           TEMPERATURE_WAIT SENSOR="temperature_fan Chamber" MINIMUM={CHAMBER_TEMP - 5} MAXIMUM={CHAMBER_TEMP + 5}
    {% endif %}

    M117 Heating Extruder
    M109 S{EXTRUDER_TEMP}

[gcode_macro PURGE_LINE]
gcode:   
    M117 Start Print!
    G1 Z.4 F3000
    G1 X5 Y1 F3000
    G1 Z0.4 F240
    G92 E0 ;zero the extruded length again
    G1 E10
    G1 Y200 E40.0 F1500.0 ; intro line
    G1 X6 F5000
    G1 Y15 E60 F1200.0 ; intro line
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X7 Y10 Z0.4 F5000.0 ; Move over to prevent blob squish
    G92 E0 ;zero the extruded length again
    G1 F9000
        
[gcode_macro END_PRINT]
#   Use PRINT_END for the slicer ending script
gcode:   
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 15) %}
        {% set x_safe = 10.0 %}
    {% else %}
        {% set x_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 15) %}
        {% set y_safe = 10.0 %}
    {% else %}
        {% set y_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = ((max_z - printer.toolhead.position.z) / 10)  %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber TARGET=35
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Octopus TARGET=40
    
    M400                             ; wait for buffer to clear
    M140 S0                          ; turn off bed
    G92 E0                           ; zero the extruder
    G1 E-3.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} F3600         ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    G90                              ; absolute positioning
    G0 X400 Y500 F18000   ; park nozzle at rear
    M109 S200
    NOZZLE_CLEAN
    M104 S0                          ; turn off hotend
    M106 S0                          ; turn off fan
    M84
    M117 Finished!
    

[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro Automatic_Inputshaper]
gcode:
  SHAPER_CALIBRATE


[gcode_macro enable_steppers]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1

[gcode_macro enable_stepper_X]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
[gcode_macro enable_stepper_X1]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1

[gcode_macro enable_stepper_Y]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1

[gcode_macro enable_stepperY1]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro disable_steppers]
gcode:
  M84

[gcode_macro nozzle_clean]

variable_prep_x: 410
variable_prep_y: 523
variable_start_x: 430
variable_start_y: 523
#variable_start_z: 20
variable_wipe_dist_x: 40
variable_wipe_dist_y: 4
variable_wipe_qty: 3
variable_wipe_spd: 400
variable_rise_distance: 20
variable_acc: 10000

gcode:
  {% if "xy" not in printer.toolhead.homed_axes %}
    G28 Y
    G28 X
  {% endif %}

  G90
  SET_VELOCITY_LIMIT VELOCITY=500
  SET_VELOCITY_LIMIT ACCEL={acc}
  
  G1 x{prep_x} y{prep_y} F12000

  #wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + wipe_dist_x} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 X{start_x + wipe_dist_x} Y{start_y + (wipe_dist_y/2)} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 X{start_x + wipe_dist_x} Y{start_y + (wipe_dist_y/2)} F{wipe_spd * 60}
    G1 X{start_x} Y{start_y} F{wipe_spd * 60}
  {% endfor %}

  SET_VELOCITY_LIMIT ACCEL=3000

  G1 x{prep_x} y{prep_y} F6000

  #G1 z{rise_distance}

[gcode_macro nozzle_clean_ERCF]

variable_prep_x: 410
variable_prep_y: 523
variable_start_x: 430
variable_start_y: 523
#variable_start_z: 20
variable_wipe_dist_x: 40
variable_wipe_dist_y: 4
variable_wipe_qty: 1
variable_wipe_spd: 400
variable_rise_distance: 20
variable_acc: 10000

gcode:
  {% if "xy" not in printer.toolhead.homed_axes %}
    G28 Y
    G28 X
  {% endif %}

  G90
  SET_VELOCITY_LIMIT VELOCITY=500
  SET_VELOCITY_LIMIT ACCEL={acc}
  
  G1 x{prep_x} y{prep_y} F12000

  #wipe nozzle
  {% for wipes in range(1, (wipe_qty + 1)) %}
    G1 X{start_x + wipe_dist_x} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
    G1 X{start_x + wipe_dist_x} Y{start_y + (wipe_dist_y/2)} F{wipe_spd * 60}
    G1 X{start_x} F{wipe_spd * 60}
  {% endfor %}

  SET_VELOCITY_LIMIT ACCEL=3000

  G1 x{prep_x} y{prep_y} F6000

#[gcode_macro M600]
#variable_park_x: 500 # try half your bed size.
#variable_park_y: 10
#variable_z_lift: 50
#variable_velocity: 150
#variable_retract: 100
#gcode:
#    SAVE_GCODE_STATE NAME=STATE_M600    # remembers the position
#    
#    PAUSE_BASE    
    # Fluidd redifines PAUSE to move the the back corner of the printer.  We don't want that.  This is what Fluidd renamed basic pause to. 
    # Mainsail renames PAUSE to "BASE_PAUSE", so you should probably use that instead.  If using other software, probably just use PAUSE.   
    
    # safe park coords
#    {% set th = printer.toolhead %}
#    {% set park_x = [params.X|default(park_x)|int, th.axis_maximum.x-2]|min %}
#    {% set park_y = [params.Y|default(park_y)|int, th.axis_maximum.y-10]|min %}
#    {% set park_z = [th.position.z + params.Z_LIFT|default(z_lift)|int, th.axis_maximum.z]|min %}
#    {% set park_feedrate = params.VELOCITY|default(velocity)|int * 60 %}
    
    # park toolhead
 #   G90
 #   G0 X{park_x} Y{park_y} Z{park_z} F{park_feedrate}
    
    #filament_unload
    
    # Tell user to reload filament
 #   M117 Reload Filament
    
 #   RESTORE_GCODE_STATE NAME=STATE_M600

# End of gcode script

[gcode_macro Z_offset]
gcode:
  CALIBRATE_Z

[gcode_macro Z_check]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
  {% endif %}
  
  G1 X250 Y250 Z1 F18000









  


